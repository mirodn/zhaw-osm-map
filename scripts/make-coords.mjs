import fs from "fs/promises";

const UA = process.env.GEOCODE_UA || "ZHAW-Map/1.0 (contact: you@example.com)";
const NOMINATIM = "https://nominatim.openstreetmap.org/search";

const BUILDINGS = [
  // ---- Campus Stadt-Mitte (aus PDF) ----
  { abbr: "MV", address: "Lagerplatz 28, 8400 Winterthur, Switzerland" },
  { abbr: "MG", address: "Katharina-Sulzer-Platz 9, 8400 Winterthur, Switzerland" },
  { abbr: "MU", address: "Zürcherstrasse 12, 8400 Winterthur, Switzerland" },
  { abbr: "MB", address: "Turbinenstrasse 2, 8400 Winterthur, Switzerland" },
  { abbr: "MS", address: "Kesselschmiede 35, 8400 Winterthur, Switzerland" },
  { abbr: "MN", address: "Technoparkstrasse 2, 8400 Winterthur, Switzerland" },
  { abbr: "MT", address: "Technoparkstrasse 2, 8400 Winterthur, Switzerland" },
  { abbr: "MY", address: "Lagerplatz 21, 8400 Winterthur, Switzerland" },
  { abbr: "MZ", address: "Lagerplatz 22, 8400 Winterthur, Switzerland" },
  { abbr: "MA", address: "Tössfeldstrasse 11, 8400 Winterthur, Switzerland" },
  { abbr: "MC", address: "Tössfeldstrasse 15, 8400 Winterthur, Switzerland" },
  { abbr: "MD", address: "Tössfeldstrasse 13, 8400 Winterthur, Switzerland" },
  { abbr: "ME", address: "Tössfeldstrasse 27, 8400 Winterthur, Switzerland" },
  { abbr: "MW", address: "Technoparkstrasse 1, 8400 Winterthur, Switzerland" },

  // ---- Campus Technikumstrasse (aus PDF) ----
  { abbr: "TB", address: "Technikumstrasse 9, 8400 Winterthur, Switzerland" },
  { abbr: "TC", address: "Zeughausstrasse 77, 8400 Winterthur, Switzerland" },
  { abbr: "TD", address: "Obere Kirchgasse 2, 8400 Winterthur, Switzerland" },
  { abbr: "TE", address: "Technikumstrasse 7, 8400 Winterthur, Switzerland" },
  { abbr: "TF", address: "Technikumstrasse 5, 8400 Winterthur, Switzerland" },
  { abbr: "TG", address: "Steinberggasse 13, 8400 Winterthur, Switzerland" },
  { abbr: "TH", address: "Technikumstrasse 9, 8400 Winterthur, Switzerland" },
  { abbr: "TM", address: "Technikumstrasse 9, 8400 Winterthur, Switzerland" },
  { abbr: "TN", address: "Technikumstrasse 71, 8400 Winterthur, Switzerland" },
  { abbr: "TO", address: "Technikumstrasse 67, 8400 Winterthur, Switzerland" },
  { abbr: "TP", address: "Technikumstrasse 11, 8400 Winterthur, Switzerland" },
  { abbr: "TS", address: "Lagerhausstrasse 1, 8400 Winterthur, Switzerland" },
  { abbr: "TU", address: "Technikumstrasse 81, 8400 Winterthur, Switzerland" },
  { abbr: "TV", address: "Technikumstrasse 9, 8400 Winterthur, Switzerland" },
  { abbr: "TW", address: "Technikumstrasse 20/22, 8400 Winterthur, Switzerland" },

  // ---- Campus St.-Georgen-Platz (aus PDF) ----
  { abbr: "SF", address: "Theaterstrasse 17, 8400 Winterthur, Switzerland" },
  { abbr: "SI", address: "Theaterstrasse 15b, 8400 Winterthur, Switzerland" },
  { abbr: "SM", address: "Theaterstrasse 15c, 8400 Winterthur, Switzerland" },
  { abbr: "SG", address: "Gertrudstrasse 15, 8400 Winterthur, Switzerland" },
  { abbr: "SN", address: "Gertrudstrasse 8, 8400 Winterthur, Switzerland" },
  { abbr: "ST", address: "Theaterstrasse 17, 8400 Winterthur, Switzerland" },
  { abbr: "SW", address: "St.-Georgen-Platz 2, 8400 Winterthur, Switzerland" },
];

// polite delay for public Nominatim
const sleep = (ms) => new Promise((r) => setTimeout(r, ms));

async function geocode(q) {
  const url = NOMINATIM + "?" + new URLSearchParams({
    q, format: "json", limit: "1", addressdetails: "0",
  });
  const resp = await fetch(url, { headers: { "User-Agent": UA } });
  if (!resp.ok) throw new Error(`${resp.status} ${resp.statusText}`);
  const arr = await resp.json();
  if (!Array.isArray(arr) || arr.length === 0) return null;
  const { lat, lon } = arr[0];
  return { lat: parseFloat(lat), lon: parseFloat(lon) };
}

async function main() {
  const out = {};
  for (const b of BUILDINGS) {
    try {
      const r = await geocode(b.address);
      if (r) {
        out[b.abbr] = r;
        console.log("OK", b.abbr, r);
      } else {
        console.warn("MISS", b.abbr);
      }
    } catch (e) {
      console.warn("ERR", b.abbr, String(e));
    }
    // Fair use: ~1 req/s
    await sleep(1100);
  }

  const header =
    `// AUTO-GENERATED by scripts/make-coords.mjs\n` +
    `// Do not edit by hand. Sources: Nominatim (OSM); addresses from ZHAW PDFs.\n\n` +
    `export type CoordMap = Record<string, { lat: number; lon: number }>; \n\n`;

  const body = "const COORDS: CoordMap = " + JSON.stringify(out, null, 2) + ";\n\nexport default COORDS;\n";
  await fs.mkdir("lib", { recursive: true });
  await fs.writeFile("lib/coords.ts", header + body, "utf8");
  console.log("Wrote lib/coords.ts with", Object.keys(out).length, "entries");
}

main().catch((e) => { console.error(e); process.exit(1); });
